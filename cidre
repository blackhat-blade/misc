#!/usr/bin/perl

use 5.012;
use warnings;
use Getopt::Long; #maybe.. not.

our $min = 0;

GetOptions('mincount=i' => \$min);
=for doc

a a' <<  0
b b' <<  8
c c' <<  16
d d' <<  24

i a'|b'|c'|d'

=cut

sub ai($) 
{
	my $a = shift;
	my @o;

	@o = split /\./, $a;
	
	$o[3] | $o[2] << 8 | $o[1] << 16 | $o[0] <<24; 
}


=for doc

a i >> 24 & 255 
b i >> 16 & 255 
c i >>  8 & 255 
d i &  255 

=cut

sub ia($)
{
	my $i = shift;
	join '.', $i >> 24 & 255, $i >> 16 & 255, $i >> 8 & 255, $i & 255; 
}


=for doc

m  ~ (  ( 2 ** (32 - l) ) -1 );

=cut

sub b($)
{
	my $l = shift;

	~(  ( 2 ** (32 - $l) ) -1 );
}

=for doc

nutin' fancy

=cut

sub l($)
{
	my $m = shift;
	my $k = 31;
	
	$m = ~$m;
	--$k while $m >>= 1;
	$k; 
}


sub na ($$)
{
	my ($i, $m) = @_;
	$i & $m;
}

sub ba ($$)
{
	my ($i, $m) = @_;
	$i | ~$m;
}

sub allN($)
{	 
	my $i = shift;
	my @r;

	for my $a( 0 .. 32)
	{
		push @r, ($i & b $a);	
	}	
	@r
}


sub allNf($)
{	 
	my $i = shift;
	my @r;

	for my $a( 0 .. 32)
	{
		push @r, ($i & b $a);	
	}	
	@r
}


=for oldtest
my $test;

$test = shift;
$, = "\t";

say "a", $test;
say "i", ai $test;
say "a'", ia ai $test; 
say "l", 12;
say "m", b 12;
say "m'", ia b 12;
say "l'", l b 12;
say "l1", 24;
say "m1", b 24;
say "m1'", ia b 24;
say "l1'", l b 24;
say "la1", 11;
say "ni1", na ai $test, b 11;
say "na1", ia na ai $test, b 11;
say "ba1", ia ba ai $test, b 11;

say "la2", 27;
say "ni2", na ai $test, b 27;
say "na2", ia na ai $test, b 27;
say "ba2", ia ba ai $test, b 27;
 
say "allNa";
say allN ai $test;

say "allN':";
say map {ia $_ } allN ai $test;

#=cut

use integer;

my $mmm = (ai(shift)  ) >> 24;
say $mmm;
#analyze @ARGV;
#
#while (@ARGV) 

=cut
my $t = [];

sub ana
{
	my $addr = shift;
	return unless $addr;
	my $i 	 = ai $addr;
	#my $bs   = 4;
	#my @f;
	#say  (32 - ($x * 4));
	my (@nibs);
	my $tc = $t;
	@nibs =
	(
		$i >> 28 & 15,
		$i >> 24 & 15, 
		$i >> 20 & 15, 
		$i >> 16 & 15, 
		$i >> 12 & 15, 
		$i >> 8  & 15, 
		$i >> 4  & 15, 
	     	$i 	 & 15,
	);
	#push @{$t}, \@nibs;

	my $p;
	push @{ $t->[ $nibs[0] ] -> [ $nibs[1] ] ->   [ $nibs[2] ] ->   [ $nibs[3] ] ->    [ $nibs[4] ] ->    [ $nibs[5] ] ->  
 		  [ $nibs[6] ] ->    [ $nibs[7] ]}, $addr ;

	for my $i (0 .. 7)
	{
		++$tc->[16]; 
		$tc = $tc->[ $nibs[$i++] ]; 
 		
	}
	
	++$tc->[16]; 
	
	#$p = [$addr, ($p ? @{$p} : () ) ];
		 
		

}		

 
ana $_ =~ s/\s+//gr while <>;


use Data::Dumper;
#print Dumper($t);

sub dp
{
	my ($st, $p, $x, $avg, $base);
	($st, $p, $x) =   (@_);
	
	$p = 0  unless $p;
	$x = 0  unless $x;

	for (0 .. 15)
	{
		my $c =  (ref $st->[$_] ?  ($st->[$_][16]) :  0);
		my $pn;
		my $na;
		my $nar;

		#$pn = $p | $_ << 28;
		
		next unless $c;
		$na  = '';
		#$nar =  ( ($pn >> 4) & 0x0f0f0f0f) | (($pn & 0x0f0f0f0f) << 4)  ;
		#$na  =  ( ($nar >> 8) & 0x00ff00ff) | (($nar & 0x00ff00ff) << 8)  ;
		
		#$nar =  $x & 1 ?  ( ($pn >> 4) & 0x0f) | (($pn & 0x0f) << 4)  :$pn  ;
		#$na  =  $x & 8 ?  ( ($nar >> 8) & 0x00FF00ff) | (($nar & 0x00ff00ff) << 8) : $nar ;


		printf "%s %2s %15s %s %2i\n",' ' x $x , $_, $na, ' ' x (32 - $x),  $c if $c >= $min;
		dp($st->[$_ ], $na, $x + 1) if $c;
		
	}
}

dp $t;

#print join "\n", map { $_->[16]  } @{$t};

#for (@{$t})
#{
#	
#}







